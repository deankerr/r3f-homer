/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 sun.glb --types --transform --root /public/model --output ../../src/Model/Sun.tsx
*/
import { useGLTF } from '@react-three/drei'
import { Vector3, useFrame } from '@react-three/fiber'
import { useRef, useState } from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    sun1: THREE.Mesh
  }
  materials: {
    sun: THREE.MeshStandardMaterial
  }
}

export function Sun(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(
    'model/sun-transformed.glb'
  ) as GLTFResult

  const ref = useRef<THREE.Group>(null)
  console.log(ref)

  const [initPos, setInitPos] = useState(
    props.position as [number, number, number]
  )
  const speed = 10

  useFrame((state, dt) => {
    if (ref.current) {
      ref.current.rotation.y += 0.01

      if (initPos) {
        const { z } = ref.current.position

        ref.current.position.x =
          Math.sin((state.clock.elapsedTime / 1) * Math.PI) * 60
        ref.current.position.z =
          Math.sin(((state.clock.elapsedTime / 1) * Math.PI) / 4) * 60
      }
    }
  })

  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh
        geometry={nodes.sun1.geometry}
        material={materials.sun}
        scale={10.008}
      />
    </group>
  )
}

useGLTF.preload('model/sun-transformed.glb')
