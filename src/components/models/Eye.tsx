/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 Eye.glb --types --transform --root /public/model --output ../../src/Model/Eye.tsx
*/
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Sphere007: THREE.Mesh
    Sphere007_1: THREE.Mesh
  }
  materials: {
    ['Eye.Shader']: THREE.MeshStandardMaterial
    ['Glass.Eye']: THREE.MeshPhysicalMaterial
  }
}

export function Eye(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(
    'model/Eye-transformed.glb'
  ) as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group scale={1.04}>
        <mesh
          geometry={nodes.Sphere007.geometry}
          material={materials['Eye.Shader']}
        />
        <mesh
          geometry={nodes.Sphere007_1.geometry}
          material={materials['Glass.Eye']}
        />
      </group>
    </group>
  )
}

useGLTF.preload('model/Eye-transformed.glb')
